openapi: 3.1.0
info:
  title: Swarm Agent
  description: This service implements ACO algorithm for data                 search
    and movement
  contact:
    name: Lakeside Labs
    email: chepizhko@lakeside-labs.com
  license:
    name: MIT License
    url: https://github.com/glaciation-heu/swarm-agent/blob/main/LICENSE
  version: 0.2.13
paths:
  /api/v0/create_agent:
    post:
      summary: Receive Message
      description: 'Receive message, parse it, create Swarm Agent, make a step.

        We can use the same function to receive messages from both

        Metadata Service and other Swarm Agents.'
      operationId: receive_message_api_v0_create_agent_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
                title: Response Receive Message Api V0 Create Agent Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /metrics:
    get:
      summary: Metrics
      description: Endpoint that serves Prometheus metrics.
      operationId: metrics_metrics_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
components:
  schemas:
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Message:
      properties:
        message_type:
          type: string
          title: Message Type
          default: forward
        unique_id:
          type: string
          title: Unique Id
          default: ''
        sparql_query:
          type: string
          title: Sparql Query
          default: SELECT * WHERE {?s ?p ?o} LIMIT 10
        visited_nodes:
          items:
            type: string
          type: array
          title: Visited Nodes
          default: []
        time_to_live:
          type: integer
          title: Time To Live
          default: 25
        keyword:
          type: string
          title: Keyword
          default: ''
      type: object
      title: Message
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
